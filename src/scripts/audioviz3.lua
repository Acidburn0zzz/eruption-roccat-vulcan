-- This file is part of Eruption.

-- Eruption is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.

-- Eruption is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.

-- You should have received a copy of the GNU General Public License
-- along with Eruption.  If not, see <http://www.gnu.org/licenses/>.

-- global state variables --
color_map = {}

ticks = 0
column = 0
power_envelope = 2000.0

-- Keyboard topology maps --
-- use 'table_offset = 0' for the ISO model
-- table_offset = get_num_keys() + 1
table_offset = 0

-- columns
num_cols = 21
max_keys_per_col = 6

-- rows
num_rows = 6
max_keys_per_row = 22
rows_topology = {

	-- ISO model
	0x00, 0x0b, 0x11, 0x17, 0x1c, 0x30, 0x35, 0x3b, 0x41, 0x4e, 0x54, 0x55, 0x56, 0x63, 0x67, 0x6c, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x01, 0x06, 0x0c, 0x12, 0x18, 0x1d, 0x21, 0x31, 0x36, 0x3c, 0x42, 0x48, 0x4f, 0x57, 0x64, 0x68, 0x6d, 0x71, 0x77, 0x7c, 0x81, 0xff,
	0x02, 0x07, 0x0d, 0x13, 0x19, 0x1e, 0x22, 0x32, 0x37, 0x3d, 0x43, 0x49, 0x50, 0x58, 0x65, 0x69, 0x6e, 0x72, 0x78, 0x7d, 0x82, 0xff,
	0x03, 0x08, 0x0e, 0x14, 0x1a, 0x1f, 0x23, 0x33, 0x38, 0x3e, 0x44, 0x4a, 0x60, 0x73, 0x79, 0x7e, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x04, 0x09, 0x0f, 0x15, 0x1b, 0x20, 0x24, 0x34, 0x39, 0x3f, 0x45, 0x4b, 0x52, 0x6a, 0x74, 0x7a, 0x7f, 0x83, 0xff, 0xff, 0xff, 0xff,
	0x05, 0x0a, 0x10, 0x25, 0x46, 0x4c, 0x53, 0x59, 0x66, 0x6b, 0x6f, 0x75, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,

	-- ANSI model
	0x00, 0x0b, 0x11, 0x17, 0x1c, 0x30, 0x35, 0x3b, 0x41, 0x4e, 0x54, 0x55, 0x56, 0x63, 0x67, 0x6c, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x01, 0x06, 0x0c, 0x12, 0x18, 0x1d, 0x21, 0x31, 0x36, 0x3c, 0x42, 0x48, 0x4f, 0x57, 0x64, 0x68, 0x6d, 0x71, 0x77, 0x7c, 0x81, 0xff,
	0x02, 0x07, 0x0d, 0x13, 0x19, 0x1e, 0x22, 0x32, 0x37, 0x3d, 0x43, 0x49, 0x50, 0x51, 0x65, 0x69, 0x6e, 0x72, 0x78, 0x7d, 0x82, 0xff,
	0x03, 0x08, 0x0e, 0x14, 0x1a, 0x1f, 0x23, 0x33, 0x38, 0x3e, 0x44, 0x4a, 0x58, 0x73, 0x79, 0x7e, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x04, 0x0f, 0x15, 0x1b, 0x20, 0x24, 0x34, 0x39, 0x3f, 0x45, 0x4b, 0x52, 0x6a, 0x74, 0x7a, 0x7f, 0x83, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x05, 0x0a, 0x10, 0x25, 0x46, 0x4c, 0x53, 0x59, 0x66, 0x6b, 0x6f, 0x75, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
}

-- event handler functions --
function on_startup(config)
  	local num_keys = get_num_keys()
	for i = 0, num_keys do
		color_map[i] = rgba_to_color(0, 0, 0, 255)
	end
end

function on_tick(delta)
    --ticks = ticks + delta + 1

	local num_keys = get_num_keys()
	for i = 0, num_keys do
			color_map[i] = rgba_to_color(0, 0, 0, lerp(0, 255, opacity))
	end

	local spectrum = get_audio_spectrum()
	local num_buckets = 32
	local num_rows = max_keys_per_col

	for col = 1, num_cols + 1 do
		local bucket = trunc(num_buckets / num_cols * col)
		local val = spectrum[bucket]
		if val == nil then val = 0 end

		local p = trunc(max(num_rows - (val / power_envelope), 0))

		--debug("Col: " .. col .. " Value: " .. val .. " Envelope: " .. power_envelope ..
		--" Bucket: " .. bucket .. " p: " .. p)

		for i = num_rows - 1, p, -1 do
			local index = rows_topology[col + i * max_keys_per_row] + 1
			color_map[index] = linear_gradient(color_hot, color_cold, i / num_rows)

			local peak_index = rows_topology[col + p * max_keys_per_row] + 1
			if i == p then
				color_map[peak_index] = rgba_to_color(255, 15, 15, lerp(0, 255, opacity))
			else
				color_map[peak_index] = rgba_to_color(0, 0, 0, 0)
			end
		end
	end

    submit_color_map(color_map)
end
